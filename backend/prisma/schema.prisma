generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String

  username String @unique

  displayName String @map("display_name")

  avatar String?
  bio    String?

  role Role @default(USER)

  isVerified Boolean @default(false) @map("is_verified")

  isEmailVerified Boolean @default(false) @map("is_email_verified")
  isTotpEnabled   Boolean @default(false) @map("is_totp_enabled")
  totpSecret      String? @map("totp_secret")

  deletedAt  DateTime? @map("deleted_at")

  tokens        Token[]
  notifications Notification[]
  notificationSettings NotificationSettings?

  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@map("users")
}

enum Role {
  USER
  ADMIN

  @@map("role")
}

model Notification {
  id String @id @default(uuid())

  message String
  type    NotificationType
  isRead  Boolean          @default(false) @map("is_read")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}

model NotificationSettings {
  id String @id @default(uuid())

  isPushNotificationsEnabled Boolean @default(true) @map("is_push_notifications_enabled")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notification_settings")
}

model Token {
  id String @id @default(uuid())

  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tokens")
}

enum TokenType {
  EMAIL_VERIFY
  PASSWORD_RESET
  PASSWORD_CHANGE
  DELETE_ACCOUNT

  @@map("token_types")
}

enum NotificationType {
  EMAIL_VERIFY
  PASSWORD_RESET
  PASSWORD_CHANGE
  DELETE_ACCOUNT
  ENABLE_TWO_FACTOR
  ENABLE_TWO_FACTOR_SUCCESS

  @@map("notification_types")
}


model Image {
  id                  String   @id @default(uuid())
  imageUrl            String   @map("image_url")          
  originalObjectKey   String   @map("original_object_key")
  phash               String? 
  deletedAt           DateTime? @map("deleted_at")

  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

   @@map("images")
}
